Code no.2:
const int buttonPin = 8;  // Digital Pin 8 define as a push Button pin
const int ledPin = 10; // Digital Pin 13 define as LED Pin
int buttonState = 0; // variable for reading the pushbutton status
void setup() {
pinMode(ledPin, OUTPUT);
pinMode(buttonPin, INPUT);
Serial.begin(9600);
}
void loop() {
buttonState = digitalRead(buttonPin);
if (buttonState HIGH)
{
digitalWrite(ledPin, HIGH);
Serial.println("Button Pressed");
}
else
{
digitalWrite(ledPin, LOW); Serial.println("Button Not Pressed");
}
code;
import RPi.GPIO as GPIO import time
LED=5
GPIO.setmode (GPIO.BCM)
GPIO.setup(LED, GPIO.OUT)
GPIO.output(LED, GPIO.HIGH)
def blink():
GPIO.output(LED, GPIO.HIGH)
 time.sleep(1)
GPIO.output(LED, GPIO.LOW) 
time.sleep(1)
def destroy():
GPIO.output(LED, GPIO.LOW)
GPIO.cleanup()
if__name__==’__main__’:
try:
while True:
blink()
except KeyboardInterrupt:
destroy()
int LEDpin = 13;
int delayT = 1000;
void setup() { 
// put your setup code here, to run once:
pinMode(LEDpin, OUTPUT);
}
void loop() {
// put your main code here, to run repeatedly.
digitalWrite(LEDpin, HIGH);
delay(delayT);
digitalWrite(LEDpin, LOW); 
delay(delayT);
 }

CODE no.3:
Interfacing of Temperature Sensor (LM35):
#include<LiquidCrystal.h>
LiquidCrystal led(7,6,5,4,3,2);
void setup()
{
Serial.begin(19200);
led.begin(16,2);
}
void loop()
{
int analogvalue = analogRead(A3);
int pecent = map(analogvalue, 0, 1023,0,600);
Serial.print("analogvalue=");
Serial.println(analogvalue);
Icd.setCursor(0,0);
lcd.print(analogvalue);
Serial.print("Pecent=");
Serial.println(pecent);
Icd.setCursor(0,1);
Icd.print(pecent);
delay(1000);
Icd.clear();
}
Interfacing of IR Sensor:

int ledPin-13;
int inputPin=2;
int val=0;
void setup()
{
pinMode(13,OUTPUT);
pinMode( inputPin, INPUT);
Serial.begin(9600);
}
void loop()
{
val=digitalRead(inputPin);  // check the pin status (High=1/Low=0) //Active Low output
if(val==HIGH)
{
Serial.print("Object Absentin");
digitalWrite(13,LOW)
}
else
{
Serial.print("Object Present'n");
digitalWrite(13,HIGH):
}
}



Interfacing of Ultrasonic Sensor:

#include <LiquidCrystal.h>
LiquidCrystal Icd (12,11,5,4,3,2);
// defining the pins
const int trigPin = 10;
const int echoPin = 9;
// defining variables
long duration;
int distance;
void setup() {
pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin, INPUT); // Sets the echoPin as an Input 
Serial.begin(9600); // Starts the serial communication
lcd.begin(16,2); 
}
void loop() {
// Clears the trigPin
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
//Reads the echoPin, returns the sound wave travel time in microseconds
duration pulseIn(echoPin, HIGH);
//Calculating the distance
distance duration 0.034/2;
lcd.setCursor (0,0);
lcd.print("Distance: ");
delay(1000);
lcd.setCursor (0,1);
lcd.print(distance);
lcd.print("cm");
}
#Raspberry Pi Libraries

import RPI.GPIO as GPIO #GPIO library
import time #library for sleep
import board
import digitalio
import adafruit_character_lcd.character_lcd as characterlcd

#set mode as BCM
GPIO.setmode(GPIO.BCM)
#Modify this if you have a different sized character LCD
lcd_columns = 16
lcd_rows = 2

#Raspberry Pi Pin Config:
lcd_rs=digitalio.DigitalInOut(board.D5)
lcd_en=digitaho Digitalin (board.D6)
lcd_d4=digitalio DigitalinOut(board D12)
lcd_d5=digitalio DigitalInOut(board.D13)
led d6=digitalio. Digital InOut(board D16)
led d7=digitalio Digitalin Outboard D17)

#Initialise the lcd class
lcd =characterlcd.Character_LCD_Mono{
lcd_rs, led_en, lcd_d4, led_d5, led_d6, lcd_d7, lcd_columns, Icd_rows)



#set pins
IR_OUT=21
BUZ=22
#setup pins at output
GPIO.setup(IR_OUT, GPIO.IN)
GPIO.setup(BUZ, GPIO.OUT)
def destroy():
GPIO.output (BUZ, GPIO.LOW)
GPIO.cleanup()
if_name_main
try:
  while True:
IR_State GPIO.input(IR_OUT)
if (IR State True):
print ("OBJECT DETECTED")
lcd.clear()
lcd.message "OBJECT DETECTED"
GPIO.output (BUZ, GPIO.HIGH)
time.sleep(0.5)
GPIO.output (BUZ, GPIO.LOW)
else:
lcd.clear()
lcd.message="NO OBJECT"
time.sleep(0.5)
print ("NO OBJECT")
except KeyboardInterrupt:
destroy()

CODE no.4:
Interfacing of DC Motor with Arduino:
int motorPin=9;
void setup(){
pinMode(motorPin,OUTPUT);
Serial.begin(9600);
While(!Serial);
Serial.println(“Speed 0 to 255”);
}
void loop(){
if(Serial.available()){
int speed =Serial.parseInt();
if(speed>=0&&speed<=255){
analogWrite(motorPin,speed);
}
}
}


Interfacing  of DC Motor with RPi:

Import RPi.GPIO as GPIO
Import time
EN1=25
IN1=26
IN2=27
GPIO.setmode(GPIO.BCM)      
GPIO.setup(EN1,GPIO.OUT)    ##Declaring as EN1 output pin
GPIO.setup(IN1,GPIO.OUT)    ##Declaring as IN1 output pin
GPIO.setup(IN2,GPIO.OUT)    ##Declaring as IN2 output pin

#clear GPIOs
def destroy():
     GPIO.output(25,False)
     GPIO.output(26,False)
     GPIO.output(27,False)
     GPIO.cleanup()
def Clockwise():
     GPIO.output(25,True)
     GPIO.output(26,True)
     GPIO.output(27,False)
def AntiClockwise():
     GPIO.output(25,True)
     GPIO.output(26,False)
     GPIO.output(27,True)

def stop():
     GPIO.output(25,False)
     GPIO.output(26,False)
     GPIO.output(27,False)

If__name__==’__main__’:   #Program start from here
     try:
         while True:
              Clockwise()
              time.sleep(2)
              Stop()
              time.sleep(1)
              AntiClockwise()
              time.sleep(2)
              Stop()
              time.sleep(1)
#If keyboard Interrupt is pressed
   except KeyboardInterrupt:
          destroy()

int DCMOTOR=13;
int delayT=1000;
void setup(){
//put your main code here ,to run repeatedly;
digitalWrite(DCMOTOR,HIGH);
delay(delayT);
 digitalWrite(LEDpin,LOW);
delay(delayT);
}

CODE no.5:
#include<DTH.h>
#define DHTPIN 2 // Define the pin where your DHT11 is connected
#define DHTTYPE DHT11 // Define the type of DHT sensor (DHT11 or DHT22)
DHT dht(DHTPΙΝ, DHTTYPE);
void setup() {
Serial.begin(9600);
dht.begin();
}
void loop() {
delay(2000); // Delay for 2 seconds between measurements
// Read temperature and humidity from the sensor
float temperature dht.readTemperature();
float humidity dht.readHumidity();
// Check if any reads failed and exit early (to try again)
if (isnan(temperature) || isnan(humidity)) {
Serial.println(&quot;Failed to read from DHT sensor&quot;);
return;
}
// Print the temperature and humidity values to the serial monitor
Serial.print(&quot;Temperature: &quot;);
Serial.print(temperature);
Serial.println(&quot; °C&quot;);
Serial.print(&quot;Humidity: &quot;);
Serial.print(humidity);
Serial.println(&quot; %&quot;);
// You can also convert to Fahrenheit if needed
// float fahrenheit (temperature 1.8) + 32;
// Serial.print(&quot;Temperature: &quot;);
//Serial.print(fahrenheit);
// Serial.println(&quot; "F&quot;);
}

import sys
import adafruit_DHT as dht
from time import sleep
import urllib
import RPi GPIO as GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO. IN)
GPIO.setwarnings(False)
#Smoke Sensor Digital output
def DHT11_data():
#Reading from DHTII and storing the temperature and humidity humi, temp dht.read_retry(11,23)
return humi, temp

#Enter Your API key here myAPI "ZQN4Z08XZ9HLOZY0"
#URL where we will send the data, Don't change it 
baseURL = "https://api.thingspeak.com/update?api_key=%s" %

while True:
humidity, temperature = DHT11_data()
print (Temp: {0:0.1f} C Humidity: {0:0.1f} %.format(temperature, humidity))
input_state = GPIO.input(24)
if input_state == False:

smoke = 1
print('Smoke Detected")
print(smoke)

else:
smoke = 0
print(Smoke is not Detected")
print(smoke)
from urllib.request import urlopen
content = urlopen(baseURL + "&field1=%s&field2=%s&field3=%s"% (temperature,
humidity, smoke))
sleep(15)


#sudo pip3 install adafruit-circuitpython-dht
#sudo apt-get install libgpiod2

import time
import board
import digitalio
import adafruit_character_lcd.character_led as characteriod
import adafruit_dht
import RPI.GPIO as GPIO

#Initial the dht device, with data pin connected to:
dhtDevice = adafruit_dht.DHT11(board.D19)

#Modify this if you have a different sized character LCD
lcd_columns 16
lcd_rows 2
#Raspberry Pi Pin Config:
led_rsdigitalio.DigitalinOut(board.D5)
led_en digitalio.DigitalInOut(board.D6)
lcd_d4digitalio.DigitalInOut(board.D12)
lcd_d5 digitalio.DigitalInOut(board.D13)
lcd_d6digitalio.DigitallnOut(board.D16)
lcd_d7digitalio.DigitalInOut(board.D17)

#Initialise the led class
led characteried.Character_LCD_Mono(
lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows)

if__name__==‘__main__’:
while True:
try:
#Print the values to the serial port
temperature_c = dhtDevice.temperature
temperature_f = temperature_c*(9/5)+32
humidity = dhtDevice.humidity
print("Temp: {:.1f} F / {:.1f} C Humidity: { }%".format(temperature_f, temperature_c, humidity))
lcd.clear()
#lcd_line_1="Temperature:" + str(temperature_c) + "C"
#lod_line_2= "\nHumidity:"+ str(humidity) + "%"
#lcd.message lcd_line_1 + lcd_line_2;
lcd.message("Temper:%. 1f C" %temperature_c)
lcd.message("\nHumidity:%.IF" %humidity)

time.sleep(2.0)


except RuntimeError as error:
#Errors happen fairly often, DHT's are hard to read, just keep going
print(error.args[0])
time.sleep(2.0)
continue

except KeyboardInterrupt:
GPIO.cleanup()
print (Exiting Program')
exit()

CODE no.7:
BLUETOOTH:
#include <SoftwareSerial.h>
SoftwareSerial my Serial(10, 11) // RX, TX
void setup() {
// Open serial communications and wait for port to open:
Serial.begin(9600)
while(! Serial); {
// wait for serial port to connect. Needed for native USB port only
Serial.println("Goodnight moon!");
// set the data rate for the SoftwareSerial port
mySerial.begin(9600);
mySerial.println("Hello, world?");
}
void loop() { // run over and over
if (mySerial.available()) { 
Serial writetmySerial.read());
}
if(Serial.available()) {
mySerial write(Serial.read());
}
}

CODE no.8:
# Install Python Serial Package
# sudo pip3 install pyserial
#Check the COM PORT Number
# sudo dmesg|grep tty
# Use ttyS0 for on-board Serial
# Use ttyUSB0 or ttyUSB1 for USB to serial converter
# after checking the com port number
import time
import serial
ser = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS, timeout=1)
counter=0
if__name__==‘__main__’:
try:
while True:
ser.write(str.encode('Write counter: %d \n'%(counter)))
time.sleep(1)
counter += 1
x=ser.readline().strip()
if len(x) != 0 :
print(x)
except KeyboardInterrupt:
ser.close()
print ('Exiting Program')

CODE no.9:
#Raspberry Pi Libraries
import RPi.GPIO as GPIO #GPIO library
import time #library for sleep
import board
import digitalio
import adafruit_character_lcd.character_lcd as characterled

#set mode as BCM
GPIO.setmode(GPIO.BCM)

#Modify this if you have a different sized character LCD
lcd columns = 16
lcd_rows = 2

#Raspberry Pi Pin Config:
lcd rs = digitalio.DigitalInOut(board.D5)
lcd en = digitalio.DigitallnOut(board.D6)
lcd d4 = digitalio.DigitalInOut(board.D12)
lcd_d5 = digitalio.DigitalInOut(board.D13)
lcd_d6 = digitalio.DigitalInOut(board.D16)
lcd_d7 = digitalio.DigitalInOut(board.D17)

#Initialise the Icd class
lcd characterlcd.Character_LCD_Mono(
lcd rs, lcd en, lcd d4, lcd d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows)
#set pins
PIR = 21
BUZ-22

#setup pins at output
GPIO.setup(PIR, GPIO.IN)
GPIO.setup(BUZ, GPIO.OUT)
if__name__==‘__main__’:
try:
while True:
PIR_State = GPIO.input(PIR)
if (PIR_State True):
print ("Motion Detected")
lcd.clear()
lcd.message = "Motion Detected"
GPIO.output (BUZ, GPIO.HIGH)
time.sleep(0.5)
GPIO.output (BUZ, GPIO.LOW)
time.sleep(0.5)
else:
lcd.clear()
lcd.message "NO Motion"
print ("No Motion")
time.sleep(0.5)
except KeyboardInterrupt:
GPIO.cleanup()

#include<firebaseESP8266.h>
#include<ESP8266WiFi.h>
#define ssid "VAIBHAVHINGOLE" //WiFi SSID
#define password "12345678#" // WiFi Password
#define FIREBASE_HOST"ehas-1234-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "o8ctQwHRzCTPRVyjMeeiqJSm3v3RSUJAB96pAQal"

//If using Relay Module
Int Device 1=D0; // initialize D6 Pin
Void setup() {
Serial.begin(9600);
WiFi.begin(ssid, password);
While(WiFi.status() != WL_CONNECTED) {
Delay(500);
Serial.print(".");
}
Serial.printIn("");
Serial.printIn("WiFi Connected");
Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
pinMode(Device_1, OUTPUT); // initialize the Device OUTPUT
}
Void loop
{
if(Firebase.get(firebaseData, "/DI")) {
if(firebaseData.dataType()=="string") {
String De 1 = firebaseData.stringData();
If(De == "1") {
digitalWrite(Device_1, HIGH); // Device 1 is ON
else if (De 1 = "0") {
digitalWrite(Device_1, LOW); // Device l is OFF
}}
}}
}
try:
while True:
PIR State GPIO.input(PIR)
if (PIR_State == True):
print ("Motion Detected")
lcd.clear()
lcd.message = "Motion Detected"
GPIO.output (BUZ, GPIO.HIGH)







code no.1
ibrary IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_unsigned.ALL; 
use IEEE.STD_LOGIC_arith.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; -- Uncomment the following library declaration if instantiating -- any Xilinx primitives in this code. --library UNISIM; --use UNISIM.VComponents.all; 
entity abc is 
Port ( a : in  
STD_LOGIC_VECTOR (3 downto 0); 
b : in  
s : in  
STD_LOGIC_VECTOR (3 downto 0); 
STD_LOGIC_VECTOR (2 downto 0); 
c : out  STD_LOGIC_VECTOR (3 downto 0)); 
end abc; 
architecture Behavioral of abc is 
begin 
process (a,b,s) 
begin 
case s is 
when "000" => c <=a+ b; 
when "001" => c <=a - b; 
when "010" => c <= a and b; 
when "011" => c <= a or b; 
when "100" => c <= a nand b; 
when "101" => c <= a nor b; 
when "110" => c <=  not a; 
when "111" => c <= a; 
when others => null; 
end case; 
end process; 
end Behavioral; 

Test bench:
LIBRARY ieee; 
USE ieee.std_logic_1164.ALL;
ENTITY xyz IS 
END xyz; 
ARCHITECTURE behavior OF xyz IS   
COMPONENT abc 
PORT( 
a : IN  
b : IN  
s : IN  
std_logic_vector(3 downto 0); 
std_logic_vector(3 downto 0); 
std_logic_vector(2 downto 0); 
c : OUT  std_logic_vector(3 downto 0)); 
END COMPONENT; --Inputs 
signal a : std_logic_vector(3 downto 0) := (others => '0'); 
signal b : std_logic_vector(3 downto 0) := (others => '0'); 
signal s : std_logic_vector(2 downto 0) := (others => '0'); --Outputs 
signal c : std_logic_vector(3 downto 0); 
BEGIN -- Instantiate the Unit Under Test (UUT) 
uut: abc PORT MAP ( 
a => a, 
b => b, 
s => s, 
c => c   
); -- Clock process definitions --   --   --  --  --  
<clock>_process :process 
begin 
<clock> <= '0'; 
wait for <clock>_period/2; 
<clock> <= '1'; 
--  
wait for <clock>_period/2; --   
end process; -- Stimulus process 
stim_proc: process 
begin   -- hold reset state for 100 ns. 
wait for 100 ns;  
a<="1010"; 
b<="1001"; 
s<="000"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="000"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="001"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="010"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="101"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="100"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="101"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="110"; 
wait for 100 ns; 
a<="1010"; 
b<="1001"; 
s<="111"; 
wait for 100 ns;
wait; 
end process; 
END; 

code no.2
VHDL CODE 
LIBRARY ieee; 
USE ieee.std_logic_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --USE ieee.numeric_std.ALL; 
ENTITY shiftreg IS 
END shiftreg; 
ARCHITECTURE behavior OF shiftreg IS  -- Component Declaration for the Unit Under Test (UUT) 
COMPONENT unishiftreg 
PORT( 
si : IN  std_logic; 
clk : IN  std_logic; 
so : OUT  std_logic; 
pin : IN  std_logic_vector(3 downto 0); 
po : OUT  std_logic_vector(3 downto 0); 
sel : IN  std_logic_vector(1 downto 0) 
); 
END COMPONENT; --Inputs 
signal si : std_logic := '0'; 
signal clk : std_logic := '0'; 
signal pin : std_logic_vector(3 downto 0) := (others => '0'); 
signal sel : std_logic_vector(1 downto 0) := (others => '0'); --Outputs 
signal so : std_logic; 
signal po : std_logic_vector(3 downto 0); -- Clock period definitions 
constant clk_period : time := 10 ns; 
BEGIN -- Instantiate the Unit Under Test (UUT) 
uut: unishiftreg PORT MAP ( 
si => si, 
clk => clk, 
so => so, 
pin => pin, 
po => po, 
sel => sel 
); -- Clock process definitions 
clk_process :process 
begin 
end process; 
clk <= '0'; 
wait for clk_period/2; 
clk <= '1'; 
wait for clk_period/2; -- Stimulus process 
stim_proc: process 
begin   -- hold reset state for 100 ns. 
wait for 100 ns;  
wait for clk_period*10; 
-- insert stimulus here  
wait; 
end process; 
END; 

TestBench: 
LIBRARY ieee; 
USE ieee.std_logic_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --USE ieee.numeric_std.ALL; 
ENTITY tb IS 
END tb; 
ARCHITECTURE behavior OF tb IS  -- Component Declaration for the Unit Under Test (UUT) 
COMPONENT unishiftreg 
PORT( 
si : IN  std_logic; 
clk : IN  std_logic; 
so : OUT  std_logic; 
pin : IN  std_logic_vector(3 downto 0); 
po : OUT  std_logic_vector(3 downto 0); 
sel : IN  std_logic_vector(1 downto 0) 
); 
END COMPONENT; --Inputs 
signal si : std_logic := '0'; 
signal clk : std_logic := '0'; 
signal pin : std_logic_vector(3 downto 0) := (others => '0'); 
signal sel : std_logic_vector(1 downto 0) := (others => '0'); --Outputs 
   signal so : std_logic; 
   signal po : std_logic_vector(3 downto 0); 
   -- Clock period definitions 
   constant clk_period : time := 10 ns; 
BEGIN 
 -- Instantiate the Unit Under Test (UUT) 
   uut: unishiftreg PORT MAP ( 
          si => si, 
          clk => clk, 
          so => so, 
          pin => pin, 
          po => po, 
          sel => sel 
        ); 
   -- Clock process definitions 
   clk_process :process 
   begin 
  clk <= '0'; 
  wait for clk_period/2; 
  clk <= '1'; 
  wait for clk_period/2; 
   end process; 
   -- Stimulus process 
   stim_proc: process 
   begin   
  sel <= "00"; 
  si <= '1'; 
wait for 100 ns;   
sel <= "01"; 
si <= '1'; 
wait for 100 ns;   
sel <= "10"; 
pin <= "1010";     
wait for 100 ns;   
wait; 
end process; 
END; 

code no.3
library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
useIEEE.STD_LOGIC_unsigned.ALL; 
entitymodncount is 
Port ( clk : in STD_LOGIC; 
clr : in STD_LOGIC; 
q :inout STD_LOGIC_VECTOR (2 downto 0)); 
endmodncount; 
architecture Behavioral of modncount is 
signal count: std_logic_vector(2 downto 0); 
begin 
process(clk) 
begin 
if (clr='1') then count <= "000"; 
elsif (rising_edge (clk)) then 
if (count="100") 
then count<= "000"; 
else 
count<=count+ 1; 
end if; 
end if; 
end process; 
q<=count; 
end Behavioral; 

Testbench: 
LIBRARY ieee; 
USE ieee.std_logic_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --USE ieee.numeric_std.ALL; 
ENTITY hhh IS 
END hhh; 
ARCHITECTURE behavior OF hhh IS -- Component Declaration for the Unit Under Test (UUT) 
COMPONENT modncount 
PORT( 
clk : IN std_logic; 
clr : IN std_logic; 
q : INOUT std_logic_vector(2 downto 0) 
); 
END COMPONENT; --Inputs 
signalclk : std_logic := '0'; 
signalclr : std_logic := '0'; --BiDirs 
signal q : std_logic_vector(2 downto 0); -- Clock period definitions -- constantclk_period : time := 10 ns; 
BEGIN -- Instantiate the Unit Under Test (UUT) 
uut: modncount PORT MAP ( 
clk =>clk, 
clr =>clr, 
q => q 
); -- Clock process definitions 
clk_process :process 
begin 
clk<= '0'; 
wait for 10 ns; 
clk<= '1'; 
wait for 10 ns; 
end process; -- Stimulus process 
stim_proc: process 
begin 
clr<='1'; -- hold reset state for 100 ns. 
wait for 20 ns; 
clr<='0'; -- hold reset state for 100 ns. 
wait for 20 ns; -- hold reset state for 100 ns. -- 
wait for 100 ns; -- -- 
wait for clk_period*10; -- insert stimulus here 
wait; 
end process; 
END; 

code no.4
library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_ARITH.ALL; 
use IEEE.STD_LOGIC_UNSIGNED.ALL; ---- Uncomment the following library declaration if instantiating ---- any Xilinx primitives in this code. --library UNISIM; --use UNISIM.VComponents.all; 
entity FIFO is 
Port ( DI : in std_logic_vector(3 
DO : out std_logic_vector(3 
RW : in std_logic; 
FULL : out std_logic; 
RS : in std_logic; 
CLK : in std_logic); 
end FIFO; 
architecture Behavioral of FIFO is 
begin 
process(RS,CLK) 
type memory is Array( 0 
downto 0); 
downto 0); 
to 
variablemem: memory;  
3)of 
variable r_p:integer range 0 
variable w_p:integer range 0 
variable overwrite :boolean; 
begin 
if RS='1' then 
DO<="0000"; 
elsif(CLK'event and CLK='1') then 
if RW='1'then 
std_logic_vector(3 
to 
to 
if (overwrite=False OR w_p/=r_p) then 
mem (w_p):=DI; 
ifw_p=3 then 
w_p:=0 ; 
else 
w_p:=w_p+1; 
overwrite:=False; 
end if; 
elseif 
RW='0' then 
if 
end if; 
3; 
3; 
(overwrite=False OR w_p/=r_p) then 
DO<=mem(r_p); 
if (r_p=3 ) then 
r_p:=0 ; 
downto 0); 
overwrite:=true; 
else 
r_p:=r_p+1; 
end if; 
end if; 
end if; 
if 
w_p=r_p 
if overwrite=true then 
FULL<='1'; 
else 
end if; 
FULL<='0'; 
else 
FULL<='0'; 
end if; 
end if; 
end process; 
end Behavioral; 
ENTITY SSSA_vhd IS 
END SSSA_vhd; 
ARCHITECTURE behavior OF SSSA_vhd IS 
then -- Component Declaration for the Unit Under Test (UUT) 
COMPONENT fifo 
PORT( 
DI : IN std_logic_vector(3 downto 0); 
RW : IN std_logic; 
RS : IN std_logic; 
CLK : IN std_logic; 
DO : OUT std_logic_vector(3 downto 0); 
FULL : OUT std_logic 
); 
END COMPONENT; --Inputs 
SIGNAL RW :std_logic := '0'; 
SIGNAL RS :std_logic := '0'; 
SIGNAL CLK :std_logic := '0'; 
SIGNAL DI :std_logic_vector(3 downto 0) := (others=>'0'); --Outputs 
SIGNAL DO :std_logic_vector(3 downto 0); 
SIGNAL FULL :std_logic; 
constant 
CLK_period : time := 10 ns; 
BEGIN -- Instantiate the Unit Under Test (UUT) 
uut: fifo PORT MAP( 
DI => DI, 
DO => DO, 
RW => RW, 
FULL => FULL, 
RS => RS, 
CLK => CLK 
); 
process 
begin 
CLK<='0' 
; 
wait for CLK_period/2; 
CLK<='1' 
wait for CLK_period/2; 
end process; 
tb : PROCESS 
BEGIN 
RS<='1'; 
wait for 100 ns; 
RS<='0'; 
RW<='1'; 
DI<="0011"; 
; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
RW<='1'; 
DI<="0110"; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
DI<="1100"; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
RW<='1'; 
DI<="1001"; -- Wait 100 ns for global reset to finish 
wait for 10 ns; -- Place stimulus here 
RW<='0'; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
RW<='0'; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
RW<='0'; -- Wait 100 ns for global reset to finish 
wait for 10 ns; 
WAIT FOR CLK_period*10; 
wait; -- will wait forever 
END PROCESS; 
RW<='1'; 
END;

code no.5
library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_ARITH.ALL; 
use IEEE.STD_LOGIC_UNSIGNED.ALL; 
entity lcd is 
Port ( clk,reset : in std_logic; 
RS,EN,RW : out std_logic; 
data : out std_logic_vector(7 downto 0)); 
end lcd; 
architecture Behavioral of lcd is 
type state_type is (s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11, 
s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23); 
signal state:state_type; 
SIGNAL count:std_logic_vector(22 downto 0); 
SIGNAL clk1:std_logic; 
begin 
process(Clk,Reset) 
begin 
if(Clk' event AND Clk='1')then 
count<=count+"0001"; 
end if; 
clk1<=count(20); 
end process; 
RW<='0'; 
process(clk1, reset) 
begin 
if reset = '1' then 
state <= s0; 
elsif rising_edge(clk1) then 
if state = s0 then 
state <= s1; 
5x7 dot matrix.  
end if; 
RS<='0'; -- Write commonds to LCD. 
EN <= '1'; 
data <= "00110000"; -- Function set for 8 bit interface, 1 line mode and 
if state = s1 then 
state <= s2; 
EN <= '0'; 
end if; 
if state = s2 then 
state <= s3; 
EN <= '1'; 
data <= "00001111"; -- Display cursor and blinking ON. 
end if; 
if state = s3 then 
state <= s4; 
EN <= '0'; 
end if; 
if state = s4 then 
state <= s5; 
EN <= '1'; 
data <= "00000001"; 
end if; 
if state = s5 then 
state <= s6; 
EN <= '0'; 
end if; 
if state = s6 then 
state <= s7; 
EN <= '1'; -- Clear display. 
data <= "10000100"; -- Display address. 
end if; 
if state = s7 then 
state <= s8; 
EN <= '0'; 
end if; 
if state = s8 then 
RS <= '1'; -- Write data to LCD. 
state <= s9; 
EN <= '1'; 
data <= "00101010"; --(*) 
end if; 
if state = s9 then 
state <= s10; 
EN <= '0'; 
end if; 
if state = s10 then 
state <= s11; 
EN <= '1'; 
data <= "01010011"; --S 
end if; 
if state = s11 then 
state <= s12; 
EN <= '0'; 
end if; 
if state = s12 then 
state <= s13; 
EN <= '1'; 
data <= "01001011"; --K 
end if; 
if state = s13 then 
state <= s14; 
EN <= '0'; 
end if; 
if state = s14 then 
state <= s15; 
EN <= '1'; 
data <= "01001110"; --N 
end if; 
if state = s15 then 
state <= s16; 
EN <= '0'; 
end if; 
if state = s16 then 
state <= s17; 
EN <= '1'; 
data <= "01000011"; --C 
end if; 
if state = s17 then 
state <= s18; 
EN <= '0'; 
end if; 
if state = s18 then 
state <= s19; 
EN <= '1'; 
data <= "01001111"; --O 
end if; 
if state = s19 then 
state <= s20; 
EN <= '0'; 
end if; 
if state = s20 then 
state <= s21; 
EN <= '1'; 
data <= "01000101"; --E 
end if; 
if state = s21 then 
state <= s22; 
EN <= '0'; 
end if; 
if state = s22 then 
state <= s23; 
EN <= '1'; 
data <= "00101010"; --(*) 
end if; 
if state = s23 then 
EN <= '0'; 
end if; 
end if; 
end process; 
end Behavioral; 

Testbench: 
LIBRARY ieee; 
USE ieee.std_logic_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --USE ieee.numeric_std.ALL; 
ENTITY lcdtest IS 
END lcdtest; 
ARCHITECTURE behavior OF lcdtest IS -- Component Declaration for the Unit Under Test (UUT) 
COMPONENT lcd 
PORT( 
clk1 : IN std_logic; 
reset : IN std_logic; 
RS : OUT std_logic; 
EN : OUT std_logic; 
RW : OUT std_logic; 
data : OUT std_logic_vector(7 downto 0) 
); 
END COMPONENT; --Inputs 
signal clk1 : std_logic := '0'; 
signal reset : std_logic := '0'; --Outputs 
signal RS : std_logic; 
signal EN : std_logic; 
signal RW : std_logic; 
signal data : std_logic_vector(7 downto 0); -- Clock period definitions 
constant clk1_period : time := 10 ns; 
BEGIN -- Instantiate the Unit Under Test (UUT) 
uut: lcd PORT MAP ( 
clk1 => clk1, 
reset => reset, 
RS => RS, 
EN => EN, 
RW => RW, 
data => data 
); -- Clock process definitions 
clk1_process :process 
begin 
clk1 <= '0'; 
wait for clk1_period/2; 
clk1 <= '1'; 
wait for clk1_period/2; 
end process; -- Stimulus process 
stim_proc: process 
begin -- hold reset state for 100 ns. 
reset<='0'; 
wait for clk1_period*10; -- insert stimulus here 
wait; 
end process; 
END; 
